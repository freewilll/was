#include "instr.h"
#include "opcodes.h"

// Generated by {{generator}}

Opcode opcodes[] = {
{%- for opcode in opcodes %}
    {
        "{{opcode.mnem}}",
        0x{{opcode.prefix}},
        0x{{opcode.ohf_prefix}},
        0x{{opcode.value}},
        0x{{opcode.sec_opcd if opcode.sec_opcd else 0}},
        {{opcode.opcd_ext}},
        {{opcode.needs_mod_rm}},
        {
            {{-"AM_"+opcode.op1.am.value.upper() if opcode.op1.am.value else 0}},
            {{-"AT_"+opcode.op1.type.value.upper() if opcode.op1.type.value else 0}},
            {{-opcode.op1.sizes}},
            {{-opcode.op1.uses_operand_size}},
            {{-opcode.op1.can_be_imm64}},
            {{-opcode.op1.word_or_double_word_operand}},
            {{-1 if opcode.op1.is_gen_reg else 0}},
            {{-opcode.op1.gen_reg_nr}}},
        {
            {{-"AM_"+opcode.op2.am.value.upper() if opcode.op2.am.value else 0}},
            {{-"AT_"+opcode.op2.type.value.upper() if opcode.op2.type.value else 0}},
            {{-opcode.op2.sizes}},
            {{-opcode.op2.uses_operand_size}},
            {{-opcode.op2.can_be_imm64}},
            {{-opcode.op2.word_or_double_word_operand}},
            {{-1 if opcode.op2.is_gen_reg else 0}},
            {{-opcode.op2.gen_reg_nr}}},
        {
            {{-"AM_"+opcode.op3.am.value.upper() if opcode.op3.am.value else 0}},
            {{-"AT_"+opcode.op3.type.value.upper() if opcode.op3.type.value else 0}},
            {{-opcode.op3.sizes}},
            {{-opcode.op3.uses_operand_size}},
            {{-opcode.op3.can_be_imm64}},
            {{-opcode.op3.word_or_double_word_operand}},
            {{-1 if opcode.op3.is_gen_reg else 0}},
            {{-opcode.op3.gen_reg_nr}}},
        {{opcode.op_size}},
        {{opcode.direction}},
        {{opcode.acc}},
        {{opcode.branch}},
        {{opcode.conver}},
        {{opcode.x87fpu}}
    },
{%- endfor %}
};

OpcodeAlias opcode_aliases[] = {
{%- for opcode_alias, wcc_opcode in opcode_aliases.items() %}
    { "{{opcode_alias}}","{{wcc_opcode.mnem}}",
        {{-wcc_opcode.op1_size.value if wcc_opcode.op1_size else 0}},
        {{-wcc_opcode.op2_size.value if wcc_opcode.op2_size else 0}},
        {{-wcc_opcode.op3_size.value if wcc_opcode.op3_size else 0}} },
{%- endfor %}
};

int opcode_count = sizeof(opcodes) / sizeof(Opcode);
int opcode_aliases_count = sizeof(opcode_aliases) / sizeof(OpcodeAlias);
